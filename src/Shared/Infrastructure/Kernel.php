<?php

// Если не организовывать структуру, то приложение превратится в ком грязи, которым будет сложно управлять.

// 1) Каждый модуль использует Onion архитектуру, которая разделяется на три слоя - Бизнес-логику (Domain: не зависит от фреймворков и других способов хранения данных, уведомлений, логирования, сервисов и.т.д. Хранит в себе сущности, фабрики, агрегаты, интерфейсы), Прикладной слой (Application: промежуточный буфер, говорящий миру как взаимодействовать с предметной областью. Хранит в себе комманды, запросы, пользовательские сценарии, сервисы, события) и Инфраструктуру (Infrastructure: может общаться с предметной областью с помощью пользовательских сценариев. Хранит в себе пользовательский интерфейс, API, реализацию интерфейсов прикладного слоя, реализацию репозиториев, внешние адаптеры сервисов, тесты и др.)

// 2) Данное приложение использует модульную организацию приложения - MonolithFirst или же Modular Monolith, то есть бизнес-логика приложения делится по некоторым контекстам, каждый из контекстов представляет собой отдельный модуль, реализованный по принципам многослойной архитектуры. 

// 3) Каждая папка внутри src - определённый модуль монолитного приложения. Каждая папка внутри модуля - это аналог многослойной архитектуры. папка Shared - это папка ядра приложения. Например, в папке Domain хранятся сущности, агрегаты, и интерфейсы, а в папке Infrastructure - их реализация.

namespace App\Shared\Infrastructure;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;
}
